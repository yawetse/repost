{
  "name": "tinycache",
  "description": "A simple in-memory cache in ~100 lines.",
  "author": {
    "name": "Andy Burke",
    "email": "aburke@bitflood.org"
  },
  "url": "https://github.com/andyburke/tinycache",
  "contributors": [
    {
      "name": "Paul Tarjan",
      "email": "npm@paulisageek.com",
      "url": "https://github.com/ptarjan"
    }
  ],
  "keywords": [
    "cache",
    "in-memory",
    "storage"
  ],
  "main": "./tinycache.js",
  "version": "0.1.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/andyburke/tinycache.git"
  },
  "readme": "# tinycache\n\nA simple, small (~100 lines) in-memory cache for node.js or the browser (~1.5KB minified).\n\n## Installation\n\n    npm install tinycache\n\n## Usage\n\n### Node\n\n    var TinyCache = require( 'tinycache' );\n    var cache = new TinyCache();\n\n    // now just use the cache\n\n    cache.put( 'foo', 'bar' );\n    console.log( cache.get( 'foo' ) );\n\n    // that wasn't too interesting, here's the good part\n\n    cache.put( 'houdini', 'disapear', 100 ); // Time in ms\n    console.log( 'Houdini will now ' + cache.get( 'houdini' ) );\n\n    setTimeout( function() {\n      console.log( 'Houdini is ' + cache.get( 'houdini' ) );\n    }, 200 );\n    \n    // don't want to allocate separate caches?\n    // there's also a default shared cache:\n    var sharedCache = Cache.shared;\n    sharedCache.put( 'foo', 'bar' );\n\n    // or you could grab it in a one-liner\n    var theSharedCache = require( 'tinycache' ).shared;\n\n### Browser\n\n#### Using Component (http://component.io)\n\n    component install andyburke/tinycache\n    \n    ...\n    \n    var TinyCache = require( 'tinycache' );\n    ...\n    \n#### By hand\n\n    <script src=\"tinycache.min.js\"></script>\n    <script>\n        var cache = new TinyCache();\n        cache.put( 'foo', 'bar' );\n    </script>\n\n## API\n\n### put = function(key, value, time)\n\n* Simply stores a value. \n* If time isn't passed in, it is stored forever.\n* Will actually remove the value in the specified time (via `setTimeout`)\n\n### get = function(key)\n\n* Retreives a value for a given key\n\n### del = function(key)\n\n* Deletes a key\n\n### clear = function()\n\n* Deletes all keys\n\n### size = function()\n\n* Returns the current number of entries in the cache\n\n### memsize = function()\n\n* Returns the number of entries taking up space in the cache\n* Will usually `== size()` unless a `setTimeout` removal went wrong\n\n### hits = function()\n\n* Returns the number of cache hits\n\n### misses = function()\n\n* Returns the number of cache misses.\n\n## TODO\n\n* Namespaces\n* A way of walking the cache for diagnostic purposes\n\n## Note on Patches/Pull Requests\n \n* Fork the project.\n* Make your feature addition or bug fix.\n* Send me a pull request.\n\n## Thanks\n\nMany thanks to Paul Tarjan for the first iteration of this library (https://github.com/ptarjan/node-cache).",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andyburke/tinycache/issues"
  },
  "_id": "tinycache@0.1.1",
  "_from": "tinycache@"
}
